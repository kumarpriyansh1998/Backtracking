class Soduku:
    def __init__(self, board):
        self.board = board

    def print_board(self):  # using simple for loops and % operators to format 2D list into more redable sudoku
        for i in range(len(board)):
            if i % 3 == 0 and i != 0:  # splitting after 3 rows
                print('---------------------')
            for j in range(len(board)):  # dividing every 3 boxes with "|"
                if j % 3 == 0 and j != 0:
                    print('| ', end='')

                print(board[i][j], end=" ")
            print('')  # for changing line

    def solve_sudoku(self):  # Backtracking algorithem
        find = self.find_empty()  # check if there is any 0 in the sudoku.
        # if not means sudoku is solved
        if not find:
            return True  # it means no empty space or zero is left
        else:
            row, col = find  # assigning coordinates of 0 to row and col variable
        for i in range(1, 10):
            if self.is_valid(i, (row, col)):  # checking validity of i
                board[row][col] = i  # if valid, we assign i to that space
                if self.solve_sudoku():  # recursive calling the method
                    return True
                board[row][col] = 0  # if not true , we are assigning the previous value 0 as it was not correct

        return False

    def is_valid(self, num, pos):  # it is a method to check validity of any number that is if it do not clashs in
        # row, column , or respective square
        # check row
        for i in range(len(board[0])):
            if board[pos[0]][i] == num and pos[1] != i:
                return False
        # check Column
        for i in range(len(board)):
            if board[i][pos[1]] == num and pos[0] != i:
                return False
        # check the box
        x_box = pos[1] // 3
        y_box = pos[0] // 3
        for i in range(y_box * 3, y_box * 3 + 3):
            for j in range(x_box * 3, x_box * 3 + 3):
                if board[i][j] == num and (i, j) != pos:
                    return False
        return True

    def find_empty(self):  # method to check if the there is any 0(empty) space in the sudoku
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 0:
                    return i, j  # returning the coordinates of empty place
        return None


board = [
    [0, 0, 1, 0, 6, 0, 0, 5, 9],
    [0, 0, 0, 0, 0, 3, 0, 2, 0],
    [0, 6, 0, 0, 8, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 5, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 7, 0, 2, 0, 0, 4, 8, 0],
    [8, 0, 0, 0, 0, 0, 9, 0, 5],
    [7, 0, 0, 6, 0, 9, 0, 3, 0],
    [0, 0, 5, 0, 0, 0, 0, 4, 0]
]

soduku1 = Soduku(board)
print('\n Unsolved Sudoku\n')
soduku1.print_board()
soduku1.solve_sudoku()
print('\nSolved Sudoku is ..\n')
soduku1.print_board()
